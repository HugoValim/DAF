#!/usr/bin/env python3
"""Perform a scan from a csv file generated by daf.scan"""

import sys
import os
import subprocess
import daf
import numpy as np
import dafutilities as du
import scan_daf as sd
import pandas as pd
import yaml
import argparse as ap
import h5py

# Py4Syn imports
import py4syn
from py4syn.utils import scan as scanModule
from py4syn.utils.scan import setFileWriter, getFileWriter, getOutput, createUniqueFileName


# scan-utils imports
from scan_utils.hdf5_writer import HDF5Writer
from scan_utils import cleanup, die
from scan_utils import Configuration, processUserField, get_counters_in_config
from scan_utils.scan_pyqtgraph_plot import PlotScan
from scan_utils.scan_hdf_plot import PlotHDFScan
from scan_utils import PlotType
from scan_utils import WriteType
from scan_utils import DefaultParser
from scan_utils.scan import ScanOperationCLI

class DAFScan(ScanOperationCLI):

    def __init__(self, args, close_window=False):
        super().__init__(**args)
        self.close_window = close_window

    def write_stat(self):
        dict_ = {}
        for counter_name, counter in py4syn.counterDB.items():
            # Add statistic data as attributes
            with h5py.File(self.unique_filename, 'a') as h5w:
                scan_idx = list(h5w['Scan'].keys())
                scan_idx = (scan_idx[-1])

                _dataset_name = 'Scan/' + scan_idx + '/instrument/' + \
                    counter_name
                _xlabel_points = 'Scan/' + scan_idx + '/instrument/' + \
                    self.xlabel + '/data'
                try: 
                    y = h5w[_dataset_name][counter_name][:]
                except:
                    continue
                if self.xlabel == 'points':
                    x = [i for i in range(len(y))]
                else:
                    x = h5w[_xlabel_points][:]
                scanModule.fitData(x[:len(y)], y)
                dict_[counter_name] = {}
                dict_[counter_name]['peak'] = float(scanModule.PEAK)
                dict_[counter_name]['peak_at'] = float(scanModule.PEAK_AT)
                dict_[counter_name]['FWHM'] = float(scanModule.FWHM)
                dict_[counter_name]['FWHM_at'] = float(scanModule.FWHM_AT)
                dict_[counter_name]['COM'] = float(scanModule.COM)

                dict_args = du.read()
                dict_args['scan_stats'] = dict_
                du.write(dict_args)

    def on_operation_end(self):
        """Routine to be done after this scan operation."""
        if self.plot_type == PlotType.pyqtgraph:
            self.pyqtgraph_plot.operation_ends()
        if self.plot_type == PlotType.hdf:
            self.hdf_plot.operation_ends()
        if bool(self.reset):
            print('[scan-utils] Reseting devices positions.')
            self.reset_motors()
        self.write_stat()
        if self.close_window:
            self.app.quit()
        # self.scan_status = False


    # def run(self):
    #     """Run the scan."""
    #     if self.plot_type == PlotType.pyqtgraph:
    #         self.pyqtgraph_plot.run_scan()
    #         self.app.exec_()

    #     # Otherwise run scan with matplotlib plot
    #     self._run()

