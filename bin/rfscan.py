#!/usr/bin/env python3
"""Perform a scan from a csv file generated by daf.scan"""

import argparse as ap
import sys
import os
import daf
import numpy as np
import dafutilities as du
import pandas as pd
import py4syn.utils.scan as ps
from py4syn.utils.motor import *
from py4syn.utils.counter import createCounter, ct, disableCounter
from py4syn.epics.ScalerClass import Scaler

epi = '''
Eg:
    daf.rfscan my_scan -t 0.01

    '''


parser = ap.ArgumentParser(formatter_class=ap.RawDescriptionHelpFormatter, description=__doc__, epilog=epi)

parser.add_argument('file_name', type=str, help='Perform a scan from the file generated by daf.scan')
parser.add_argument('-t', '--time', metavar='', type=float, help='Acquisition time in each point in seconds. Default is 0.01s.')

args = parser.parse_args()
dic = vars(args)


dict_args = du.read()

for j,k in dic.items():
    if j in dict_args and k is not None:
        dict_args[j] = str(k)
du.write(dict_args)


dict_args = du.read()

if args.time == None:
	time = 0.01
else:
	time = args.time



scan_points = pd.read_csv(args.file_name)


mu_points = [float(i) for i in scan_points["Mu"]] # Get only the points related to mu
eta_points = [float(i) for i in scan_points["Eta"]] # Get only the points related to eta
chi_points = [float(i) for i in scan_points["Chi"]] # Get only the points related to chi
phi_points = [float(i) for i in scan_points["Phi"]] # Get only the points related to phi
nu_points = [float(i) for i in scan_points["Nu"]] # Get only the points related to nu
del_points = [float(i) for i in scan_points["Del"]] # Get only the points related to del

PVS = du.PVS

for motor_name, motor in PVS.items():
    createMotor(motor_name, motor)


# time = [time for i in range(len(del_points))]

# writer = ps.DefaultWriter("test.txt")
# ps.setFileWriter(writer)


ps.setPlotGraph(False) # Error with multiprocessing.

ps.scan('Mu', mu_points, 'Eta', eta_points, 'Chi', chi_points, 
    'Phi', phi_points, 'Nu', nu_points, 'Del', del_points, len(del_points), time, time)


print('')
print("Scan Ended")
print("Time elapsed: ", ps.SCAN_DATA['scan_duration'])

log = sys.argv.pop(0).split('command_line/')[1]

for i in sys.argv:
    log += ' ' + i

os.system("echo {} >> Log".format(log))

if dict_args['macro_flag'] == 'True':
    os.system("echo {} >> {}".format(log, dict_args['macro_file']))
