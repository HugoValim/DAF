#!/usr/bin/env python3
"""Perform a scan from a csv file generated by daf.scan"""

import argparse as ap
import sys
import os
import daf
import numpy as np
import dafutilities as du
import pandas as pd
import yaml
from scan_utils.scan import ScanOperationCLI
import subprocess


# Py4Syn imports
from py4syn.utils import scan as scanModule
from py4syn.utils.scan import setFileWriter, getFileWriter, getOutput, createUniqueFileName

# scan-utils imports
from scan_utils.hdf5_writer import HDF5Writer
from scan_utils import cleanup, die
from scan_utils import Configuration, processUserField, get_counters_in_config
from scan_utils.scan_pyqtgraph_plot import PlotScan
from scan_utils.scan_hdf_plot import PlotHDFScan
from scan_utils import PlotType
from scan_utils import WriteType
from scan_utils import DefaultParser
import subprocess


epi = '''
Eg:
    daf.rfscan my_scan -t 0.01

    '''


parser = ap.ArgumentParser(formatter_class=ap.RawDescriptionHelpFormatter, description=__doc__, epilog=epi)

parser.add_argument('-f', '--file_name', type=str, help='Perform a scan from the file generated by daf.scan')
parser.add_argument('-c', '--configuration', type=str, help='choose a counter configuration file', default='default')
parser.add_argument('-t', '--time', metavar='', type=float, help='Acquisition time in each point in seconds. Default is 0.01s.')
parser.add_argument('-o', '--output', help='output data to file output-prefix/<fileprefix>_nnnn')
parser.add_argument('-s', '--sync', help='write to the output file after each point', action='store_true')
parser.add_argument('--xlabel', help='motor which position is shown in x axis (if not set, point index is shown instead)', default='points')

args = parser.parse_args()
dic = vars(args)


dict_args = du.read()

for j,k in dic.items():
    if j in dict_args and k is not None:
        dict_args[j] = str(k)
du.write(dict_args, is_scan = True)


dict_args = du.read()

if args.time == None:
	time = [[0.01]]
else:
	time = [[args.time]]

scan_points = pd.read_csv(args.file_name)


mu_points = [float(i) for i in scan_points["Mu"]] # Get only the points related to mu
eta_points = [float(i) for i in scan_points["Eta"]] # Get only the points related to eta
chi_points = [float(i) for i in scan_points["Chi"]] # Get only the points related to chi
phi_points = [float(i) for i in scan_points["Phi"]] # Get only the points related to phi
nu_points = [float(i) for i in scan_points["Nu"]] # Get only the points related to nu
del_points = [float(i) for i in scan_points["Del"]] # Get only the points related to del

# data = {'huber_mu':mu_points, 'huber_eta':eta_points, 'huber_chi':chi_points,
#         'huber_phi':phi_points, 'huber_nu':nu_points, 'huber_del':del_points}

data = {'debug3':mu_points, 'debug5':eta_points, 'debug2':chi_points,
        'debug1':phi_points, 'debug4':nu_points, 'debug6':del_points}

motors = [i for i in data.keys()]

with open('.points.yaml', 'w') as stream:
    yaml.dump(data, stream, allow_unicode=False)

print(args.configuration)
# os.system("scan -c default -o test --motor huber_mu huber_eta huber_chi huber_phi huber_nu huber_del -s --calculated-points .points.yaml --xlabel huber_eta --time 1")
# os.system("scan -c hugo -o {} --motor {} {} {} {} {} {} -s --calculated-points .points.yaml --xlabel {} --time 0.01 2>/dev/null".format(args.file_name, motors[0], motors[1], motors[2], motors[3], motors[4], motors[5], motors[1]))


args = {'configuration': args.configuration, 'optimum': None, 'repeat': 1, 'sleep': 0, 'message': None, 
'output': args.output, 'sync': True, 'snake': False, 'motor': ['debug1', 'debug2', 'debug3', 'debug4', 'debug5', 'debug6'], 'xlabel': args.xlabel, 
'prescan': 'ls', 'postscan': 'pwd', 'plot_type': PlotType.hdf, 'relative': False, 'reset': False, 'step_mode': False, 
'points_mode': False, 'start': None, 'end': None, 'step_or_points': None, 'time': time, 'filename': '.points.yaml'}


class DAFScan(ScanOperationCLI):

    # def __init__(self):
    #     super().__init__()

    def on_operation_end(self):
        """Routine to be done after this scan operation."""
        if self.plot_type == PlotType.pyqtgraph:
            self.pyqtgraph_plot.operation_ends()
        if self.plot_type == PlotType.hdf:
            self.hdf_plot.operation_ends()
        if bool(self.reset):
            print('[scan-utils] Reseting devices positions.')
            self.reset_motors()
        
        print(scan.statistic_dict)
scan = DAFScan(**args)
scan.run()


data = scan.statistic_dict



print(data)
print('oi do fim')

log = sys.argv.pop(0).split('command_line/')[1]

for i in sys.argv:
    log += ' ' + i

os.system("echo {} >> Log".format(log))

if dict_args['macro_flag'] == 'True':
    os.system("echo {} >> {}".format(log, dict_args['macro_file']))
