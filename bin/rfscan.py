#!/usr/bin/env python3
"""Perform a scan from a csv file generated by daf.scan"""

import argparse as ap
import sys
import os
import daf
import numpy as np
import dafutilities as du
import pandas as pd
import yaml

epi = '''
Eg:
    daf.rfscan my_scan -t 0.01

    '''


parser = ap.ArgumentParser(formatter_class=ap.RawDescriptionHelpFormatter, description=__doc__, epilog=epi)

parser.add_argument('file_name', type=str, help='Perform a scan from the file generated by daf.scan')
parser.add_argument('-t', '--time', metavar='', type=float, help='Acquisition time in each point in seconds. Default is 0.01s.')

args = parser.parse_args()
dic = vars(args)


dict_args = du.read()

for j,k in dic.items():
    if j in dict_args and k is not None:
        dict_args[j] = str(k)
du.write(dict_args, is_scan = True)


dict_args = du.read()

if args.time == None:
	time = 0.01
else:
	time = args.time



scan_points = pd.read_csv(args.file_name)


mu_points = [float(i) for i in scan_points["Mu"]] # Get only the points related to mu
eta_points = [float(i) for i in scan_points["Eta"]] # Get only the points related to eta
chi_points = [float(i) for i in scan_points["Chi"]] # Get only the points related to chi
phi_points = [float(i) for i in scan_points["Phi"]] # Get only the points related to phi
nu_points = [float(i) for i in scan_points["Nu"]] # Get only the points related to nu
del_points = [float(i) for i in scan_points["Del"]] # Get only the points related to del

data = {'huber_mu':mu_points, 'huber_eta':eta_points, 'huber_chi':chi_points,
        'huber_phi':phi_points, 'huber_nu':nu_points, 'huber_del':del_points}

with open('.points.yaml', 'w') as stream:
    yaml.dump(data, stream, allow_unicode=False)


os.system("scan -c default -o test --motor huber_mu huber_eta huber_chi -s --calculated-points .points.yaml --xlabel huber_eta --time 1")


log = sys.argv.pop(0).split('command_line/')[1]

for i in sys.argv:
    log += ' ' + i

os.system("echo {} >> Log".format(log))

if dict_args['macro_flag'] == 'True':
    os.system("echo {} >> {}".format(log, dict_args['macro_file']))
